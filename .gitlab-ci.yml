# workflow:
#   rules:
#     - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
#     - when: never

variables:
  TF_ROOT: open5gs/infrastructure/eks
  TF_STATE_NAME: open5gs

include:
  - template: Terraform/Base.gitlab-ci.yml  
  - template: Jobs/SAST-IaC.gitlab-ci.yml   

stages:
  - validate
  - test
  - build
  - deploy
  - cleanup 
  - install_open5gs
  - install_ueransim
  - smoke_test 

fmt:
  extends: .terraform:fmt
  before_script:
    - apk add --no-cache python3 py3-pip 
    - pip3 install --upgrade pip 
    - pip3 install --no-cache-dir awscli
    - aws --version
  needs: []
  rules:
    - changes:
        paths:
          - open5gs/infrastructure/eks/*.tf

validate:
  extends: .terraform:validate
  before_script:
    - apk add --no-cache python3 py3-pip 
    - pip3 install --upgrade pip 
    - pip3 install --no-cache-dir awscli
    - aws --version
  needs: []
  # rules:
  #   - changes:
  #       paths:
  #         - open5gs/infrastructure/eks/*.tf

build:
  extends: .terraform:build
  resource_group: $TF_STATE_NAME
  environment:
    name: $TF_STATE_NAME
    action: prepare
  before_script:
    - apk add --no-cache python3 py3-pip 
    - pip3 install --upgrade pip 
    - pip3 install --no-cache-dir awscli
    - aws --version
  after_script:
    - gitlab-terraform state show module.eks.module.eks_managed_node_group["default_node_group"].aws_eks_node_group.this[0]
    - gitlab-terraform state show module.eks.module.eks_managed_node_group["default_node_group"].aws_launch_template.this[0]
  #   - changes:
  #       paths:
  #         - open5gs/infrastructure/eks/*.tf
 
deploy: # pipeline currently doesn't scale according to current terraform configurations
  extends: .terraform:deploy
  resource_group: $TF_STATE_NAME
  dependencies:
    - build
  environment:
    name: $TF_STATE_NAME
    action: start
  before_script:
    - apk add --no-cache python3 py3-pip 
    - pip3 install --upgrade pip 
    - pip3 install --no-cache-dir awscli
    - aws --version
  # rules:
  #   - changes:
  #       paths:
  #         - open5gs/infrastructure/eks/*.tf

cleanup:
  extends: .terraform:destroy
  resource_group: $TF_STATE_NAME
  dependencies:
    - deploy
  environment:
    name: $TF_STATE_NAME
    action: stop
  before_script:
    - apk add --no-cache python3 py3-pip 
    - pip3 install --upgrade pip 
    - pip3 install --no-cache-dir awscli
    - aws --version
  when: manual

kics_scan:
  image: 
    name: checkmarx/kics
    entrypoint: [""]
  stage: test
  allow_failure: true
  script:
    - apk update
    - apk add ca-certificates openssl
    - apk add curl
    - curl -LO https://get.helm.sh/helm-v3.7.0-linux-amd64.tar.gz
    - tar -zxvf helm-v3.7.0-linux-amd64.tar.gz
    - mv linux-amd64/helm /usr/local/bin/
    - helm version
    - helm repo add openverso https://gradiant.github.io/openverso-charts/ 
    - helm template open5gs openverso/open5gs --values open5gs_values.yml > open5gs.yaml 
    - kics scan -p open5gs.yaml -t Kubernetes | tee security-scan.txt
  artifacts:
    paths: 
      - security-scan.txt
      - open5gs.yaml
# kics_scan:
#   image: ubuntu:latest
#   stage: kics_test
#   allow_failure: true
#   script:
#     - apt-get update && apt-get install -y curl
#     - curl -sfL 'https://raw.githubusercontent.com/Checkmarx/kics/master/install.sh' | bash
#     - helm template open5gs openverso/open5gs --values open5gs_values.yml > open5gs.yaml
#     - kics scan -t Kubernetes open5gs.yaml | tee security-scan.txt
#   artifacts:
#     paths: 
#       - security-scan.txt
      
install_open5gs:
  image:
    name: alpine/helm
    entrypoint: [""]
  stage: install_open5gs
  variables:
    REGION: us-east-1
    CLUSTER_NAME: cntf-open5gs-cluster
  environment:
    name: open5gs_cluster 
  script:
    - apk add --no-cache python3 py3-pip 
    - pip3 install --upgrade pip 
    - pip3 install --no-cache-dir awscli
    - aws --version
    - aws eks update-kubeconfig --region $REGION --name $CLUSTER_NAME
    - helm repo add openverso https://gradiant.github.io/openverso-charts/
    - helm upgrade --install open5gs openverso/open5gs --namespace open5gs --values ./open5gs_values.yml

install_ueransim:
  image:
    name: alpine/helm
    entrypoint: [""]
  stage: install_ueransim
  variables:
    REGION: us-east-1
    CLUSTER_NAME: cntf-open5gs-cluster
  environment:
    name: open5gs_cluster 
  script: 
    - apk add --no-cache python3 py3-pip 
    - pip3 install --upgrade pip 
    - pip3 install --no-cache-dir awscli
    - aws --version
    - aws eks update-kubeconfig --region $REGION --name $CLUSTER_NAME
    - helm repo add openverso https://gradiant.github.io/openverso-charts/
    - helm upgrade --install ueransim-gnb openverso/ueransim-gnb --namespace ueransim --values ./openverso_ueransim_gnb_values.yml #added paths to created helm values files
    - helm upgrade --install ueransim-ues openverso/ueransim-ues --namespace ueransim --values ./openverso_ueransim_ues_values.yml

ue_populate:
  stage: smoke_test
  image: ubuntu:latest
  environment: 
    name: open5gs_cluster
  script:
    - apt-get update && apt-get install -y curl
    - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    - unzip awscliv2.zip
    - ./aws/install
    - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    - chmod +x kubectl
    - mv kubectl /usr/local/bin/
    - aws eks update-kubeconfig --name $CLUSTER_NAME --region $REGION
    - POPULATE_POD=$(kubectl -n open5gs get pod -o name -l app.kubernetes.io/component=populate)
    - kubectl -n open5gs cp ./ue_populate.sh $POPULATE_POD:/tmp/ue_populate.sh
    - kubectl -n ueransim exec $POPULATE_POD -- /tmp/ue_populate.sh

smoke_test:
  image: ubuntu:latest
  needs: 
    - ue_populate
  stage: smoke_test
  environment:
    name: open5gs_cluster 
  script:
    - apt-get update && apt-get install -y curl
    - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    - unzip awscliv2.zip
    - ./aws/install
    - chmod +x kubectl
    - mv kubectl /usr/local/bin/
    - UE_POD=$(kubectl -n ueransim get pod -o name -l app.kubernetes.io/component=ues)
    - kubectl -n ueransim cp ./ueransim_smoke_test.sh $UE_POD:/tmp/ueransim_smoke_test.sh
    - kubectl -n ueransim exec $UE_POD -- /tmp/ueransim_smoke_test.sh
    